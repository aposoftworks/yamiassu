
//-------------------------------------------------
// Serialization functions
//-------------------------------------------------


// Serialized variables (we keep this data so they won't be serialized twice)
$bootstrap_variables: ();

// Get a serialized variable
@function get_var ($key) {
    // Default response
    @return var(--#{$key});
}

// Special function that converts a serialized var back to its normal value
@function get_raw ($key) {
    @return map-get($bootstrap_variables, $key);
}

// Insert a variable for serialization
@function set_var ($key, $value) {
    // Serialize
    $bootstrap_variables: map-merge($bootstrap_variables, ($key:$value)) !global;
    
    // Return the actual value
    @return get_var($key);
}

// Print to a context all the variables saved
@mixin print_var {
    :root {
        @each $key, $var in $bootstrap_variables {
            $is_map: map_to_gradient(get_raw($key));
            
            // Map type
            @if ($is_map != false) {
                --#{$key}: #{$is_map};
            }
            // Base type
            @else {
                --#{$key}: #{$var};
            }
        }
    }
}

//-------------------------------------------------
// color functions
//-------------------------------------------------

@function lighten_color ($key, $value) {
    //Get color
    $color: map-get($bootstrap_variables, $key);

    //Check if it is a map
    @if (type-of($color) == "map") {
        //Check if is a gradient
        @if (map-get($color, "type") == "gradient") {
            $colors: map-get($color, "colors");
    
            @for $iteration from 1 to (length($colors) + 1) {
                $iteration_color: nth($colors, $iteration);
    
                //Simple color
                @if (type-of($iteration_color) == "color") {
                    $colors: set-nth($colors, $iteration, lighten($iteration_color, $value));
                }
                //Sample color
                @else if (type-of($iteration_color) == "list") {
                    //We only care about the first index
                    @if (type-of(nth($iteration_color, 1)) == "color") {
                        $iteration_color: set-nth($iteration_color, 1, lighten(nth($iteration_color, 1), $value));
                    }
                }
            }

            @return print_gradient(map-merge($color, ("colors":$colors)));
        }
    }
    //Just a normal color
    @else {
        @return #{lighten(map-get($bootstrap_variables, $key), $value)};
    }
}

@function darken_color ($key, $value) {
    //Get color
    $color: map-get($bootstrap_variables, $key);

    //Check if it is a map
    @if (type-of($color) == "map") {
        //Check if is a gradient
        @if (map-get($color, "type") == "gradient") {
            $colors: map-get($color, "colors");
    
            @for $iteration from 1 to (length($colors) + 1) {
                $iteration_color: nth($colors, $iteration);
    
                //Simple color
                @if (type-of($iteration_color) == "color") {
                    $colors: set-nth($colors, $iteration, darken($iteration_color, $value));
                }
                //Sample color
                @else if (type-of($iteration_color) == "list") {
                    //We only care about the first index
                    @if (type-of(nth($iteration_color, 1)) == "color") {
                        $iteration_color: set-nth($iteration_color, 1, darken(nth($iteration_color, 1), $value));
                    }
                }
            }

            @return print_gradient(map-merge($color, ("colors":$colors)));
        }
    }
    //Just a normal color
    @else {
        @return #{darken(map-get($bootstrap_variables, $key), $value)};
    }
}